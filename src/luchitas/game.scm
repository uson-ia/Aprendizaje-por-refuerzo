(import (scheme base)
	(scheme write)
	(magic random))

(define-record-type <fighter>
  (make-fighter name position life)
  fighter?
  (name      fighter-name)
  (position  fighter-position  set-fighter-position!)
  (life      fighter-life      set-fighter-life!))

(define (decrease-life! fighter damage)
  (set-fighter-life! fighter (- (fighter-life fighter) damage)))

(define (fighter-dead? fighter)
  (<= (fighter-life fighter) 0))

(define (game-loop player enemy enemy-ai)
  (display-game! player enemy)
  (let ((player-action (read-action (valid-actions player enemy)))
	(enemy-action  (enemy-ai enemy player (valid-actions enemy player))))
    (execute-actions! player player-action enemy enemy-action)
    (decrease-life! player 1)
    (decrease-life! enemy 1)
    (cond ((fighter-dead? player)
	   (report-win! enemy player))
	  ((fighter-dead? enemy)
	   (report-win! player enemy))
	  (else
	   (game-loop player enemy enemy-ai)))))

(define (start-game enemy-ai)
  (display "ENTER YOUR NAME: ")
  (let* ((name   (read-line))
	 (player (make-fighter name 2 50))
	 (enemy  (make-fighter "Bruce Lee" 7 50)))
    (display-start!)
    (game-loop player enemy enemy-ai)))

(define (valid-actions for vs)
  (cond ((= (modulo (+ (fighter-position for) 1) 10)
	    (fighter-position vs))
	 '(move-left stay attack defense))
	((= (modulo (- (fighter-position for) 1) 10)
	    (fighter-position vs))
	 '(move-right stay attack defense))
	(else
	 '(move-right move-left stay turn))))

(define (read-action actions)
  (display "WRITE AN ACTION ")
  (display actions)
  (display ": ")
  (let ((choice (read)))
    (if (memq choice actions)
	choice
	(begin
	  (display "! NOT AN AVAILABLE ACTION\n")
	  (read-action actions)))))

(define (fighter-go-left! x)
  (define pos (fighter-position x))
  (set-fighter-position! x (modulo (- pos 1) 10)))

(define (fighter-go-right! x)
  (define pos (fighter-position x))
  (set-fighter-position! x (modulo (+ pos 1) 10)))

(define (execute-actions! player player-action enemy enemy-action)
  (case player-action
    ((move-right)
     (fighter-go-right! player)
     (case enemy-action
       ((move-right)
	(fighter-go-right! enemy))
       ((move-left)
	(fighter-go-left! enemy))
       ((attack)
	(decrease-life! player (random-integer 3))))
     )
    ((move-left)
     (fighter-go-left! player)
     (case enemy-action
       ((move-right)
	(fighter-go-right! enemy))
       ((move-left)
	(fighter-go-left! enemy))
       ((attack)
	(decrease-life! player (random-integer 3)))))
    ((stay)
     (case enemy-action
       ((move-right)
	(fighter-go-right! enemy))
       ((move-left)
	(fighter-go-left! enemy))
       ((attack)
	(decrease-life! player 10))))
    ((attack)
     (case enemy-action
       ((move-right)
	(fighter-go-right! enemy)
	(decrease-life! enemy (random-integer 3)))
       ((move-left)
	(fighter-go-left! enemy)
	(decrease-life! enemy (random-integer 3)))
       ((stay)
	(decrease-life! enemy 10))
       ((attack)
	(decrease-life! enemy (+ 5 (random-integer 5)))
	(decrease-life! player (+ 5 (random-integer 5))))
       ((defense)
	(decrease-life! enemy 1))))
    ((defense)
     (case enemy-action
       ((move-right)
	(fighter-go-right! enemy))
       ((move-left)
	(fighter-go-left! enemy))
       ((attack)
	(decrease-life! player 1))))))

(define (display-start!)
  (display " (                                   (     \n")
  (display " )\\ )               )        )       )\\ )  \n")
  (display "(()/(   (        ( /( (   ( /(    ) (()/(  \n")
  (display " /(_)) ))\\   (   )\\()))\\  )\\())( /(  /(_)) \n")
  (display "(_))  /((_)  )\\ ((_)\\((_)(_))/ )(_))(_))   \n")
  (display "| |  (_))(  ((_)| |(_)(_)| |_ ((_)_ / __|  \n")
  (display "| |__| || |/ _| | ' \\ | ||  _|/ _` |\\__ \\  \n")
  (display "|____|\\_,_|\\__| |_||_||_| \\__|\\__,_||___/  \n\n\n")
  (display "= = = = = = = = = = = = = = = = = = = = =  \n"))

(define (display-game! player enemy)
  (define player-pos  (fighter-position player))
  (define player-life (fighter-life player))
  (define enemy-pos   (fighter-position enemy))
  (define enemy-life  (fighter-life enemy))

  (display "     p = ")
  (display (list player-pos player-life))
  (display "         e = ")
  (display (list enemy-pos enemy-life))
  (newline)
  
  (display "            [")
  (let loop ((i 0))
    (unless (> i 9)
      (cond ((= i player-pos) (display "p"))
	    ((= i enemy-pos) (display "e"))
	    (else (display " ")))
      (loop (+ i 1))))
  (display "]")

  (newline)
  (display "= = = = = = = = = = = = = = = = = = = = =  \n"))

(define (report-win! winner loser)
  (display "       FIGHTER ")
  (display (fighter-name winner))
  (display " WINS!!!!")
  (newline)
  (display (fighter-name loser))
  (display " is crying")
  (newline))

(define (enemy-ai enemy player actions)
  (cond ((memq 'attack actions)
	 'attack)
	((< (fighter-position player)
	    (fighter-position enemy))
	 'move-left)
	(else
	 'move-right)))

(start-game enemy-ai)
